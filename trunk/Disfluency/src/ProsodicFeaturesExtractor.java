import java.util.Vector;import java.io.*;// TODO// For now, this class has knowledge of which prosodic features to extract// Caller gives files, and asks to extract prosodic features at certain timespublic class ProsodicFeaturesExtractor {	Vector<String> m_featureNames;		public ProsodicFeaturesExtractor() { 		m_featureNames = new Vector<String>();		m_featureNames.add("wordpitchrange"); 		m_featureNames.add("wordpitchrangespeakernormalized"); 		m_featureNames.add("wordpitchrangenotnormalized"); 		m_featureNames.add("energy"); 		m_featureNames.add("energyspeakernormalized"); 		m_featureNames.add("energynotnormalized"); 		m_featureNames.add("f0"); 		m_featureNames.add("f0speakernormalized"); 		m_featureNames.add("f0notnormalized"); 		m_featureNames.add("intervalSize");		m_featureNames.add("pauseLengthBeforeWord");		m_featureNames.add("pauseLengthBeforeWordSpeakerNormalized");		m_featureNames.add("AverageSpeakerPitch");		m_featureNames.add("AverageSpeakerEnergy");	}	public Vector<String> getFeatureNames() {		return m_featureNames;	}		public static void main(String args[])	{		CommandLineParser argp = new CommandLineParser();		argp.parseArguments(args);				ProsodicFeaturesExtractor pfe = new ProsodicFeaturesExtractor();		File[] wavfiles = pfe.getWaveFiles(argp.m_srcDir);		File[] intervalfiles = pfe.getIntervalFiles(argp.m_srcDir);		Vector<Vector<Double>> prosodicFeatures = new Vector<Vector<Double>>();				for(int i=0; i<wavfiles.length; i++)		{			System.out.println(TimeUtils.now());			String wavfile = argp.m_srcDir +"/speech/dev1_wav/"+wavfiles[i].getName();			String intervalfile = argp.m_srcDir +"/text/dev1_int/"+intervalfiles[i].getName();						System.out.println(wavfile);			String osname = System.getProperty("os.name");						String praatpath = "/Applications/Praat.app/Contents/MacOS/Praat src/pitchscript.praat ";			//String praatpath = "/Applications/Praat.app/Contents/MacOS/Praat pitchscript.praat ";			if(osname.compareToIgnoreCase("Mac OS X")!=0) {				praatpath = "C:/Users/teja/Documents/Stan/cs224s/praatcon.exe src/pitchscript.praat ";			}						String cmd1 = "mkdir " + argp.m_srcDir + "/text/dev1_feat/";			String cmd =  praatpath+ wavfile + " " + intervalfile;						try			{				if(i==0)				{					Runtime.getRuntime().exec(cmd1);				}								Process p =Runtime.getRuntime().exec(cmd);				try				{					int exitCode = p.waitFor();					}				catch(Exception e){e.printStackTrace();}			}						catch(IOException e)			{				e.printStackTrace();			}							prosodicFeatures.add(new Vector<Double>());						try{				// Open the file that is the first 				// command line parameter				FileInputStream fstream = new FileInputStream(argp.m_srcDir + "/text/dev1_feat/"+intervalfiles[i].getName());				// Get the object of DataInputStream				DataInputStream in = new DataInputStream(fstream);				BufferedReader br = new BufferedReader(new InputStreamReader(in));				String strLine;				int lineno=0;				int iterator=0;								//Read File Line By Line				while ((strLine = br.readLine()) != null)   {					if(strLine.equals("--undefined--"))					{						strLine="0";					}					((Vector<Double>)prosodicFeatures.get(lineno)).add(new Double(strLine));										// Print the content on the console					//System.out.println (strLine);					if(iterator==13)					{						prosodicFeatures.add(new Vector<Double>());						lineno++;						iterator=0;					}					else						iterator++;				}								//Close the input stream				in.close();			}catch (Exception e){//Catch exception if any				System.err.println("Error: " + e.getMessage());			}					//	}			// sanity checks...		}						//dev2				wavfiles = pfe.getWaveFiles2(argp.m_srcDir);		intervalfiles = pfe.getIntervalFiles2(argp.m_srcDir);				for(int i=0; i<wavfiles.length; i++)		{			System.out.println(TimeUtils.now());			String wavfile = argp.m_srcDir +"/speech/dev2_wav/"+wavfiles[i].getName();			String intervalfile = argp.m_srcDir +"/text/dev2_int/"+intervalfiles[i].getName();						System.out.println(wavfile);			String osname = System.getProperty("os.name");						String praatpath = "/Applications/Praat.app/Contents/MacOS/Praat src/pitchscript.praat ";			//String praatpath = "/Applications/Praat.app/Contents/MacOS/Praat pitchscript.praat ";			if(osname.compareToIgnoreCase("Mac OS X")!=0) {				praatpath = "C:/Users/teja/Documents/Stan/cs224s/praatcon.exe src/pitchscript.praat ";			}						String cmd1 = "mkdir " + argp.m_srcDir + "/text/dev2_feat/";			String cmd =  praatpath+ wavfile + " " + intervalfile;						try			{				if(i==0)				{					Runtime.getRuntime().exec(cmd1);				}								Process p =Runtime.getRuntime().exec(cmd);				try				{					int exitCode = p.waitFor();					}				catch(Exception e){e.printStackTrace();}			}						catch(IOException e)			{				e.printStackTrace();			}						prosodicFeatures.add(new Vector<Double>());						try{				// Open the file that is the first 				// command line parameter				FileInputStream fstream = new FileInputStream(argp.m_srcDir + "/text/dev2_feat/"+intervalfiles[i].getName());				// Get the object of DataInputStream				DataInputStream in = new DataInputStream(fstream);				BufferedReader br = new BufferedReader(new InputStreamReader(in));				String strLine;				int lineno=0;				int iterator=0;								//Read File Line By Line				while ((strLine = br.readLine()) != null)   {					if(strLine.equals("--undefined--"))					{						strLine="0";					}					((Vector<Double>)prosodicFeatures.get(lineno)).add(new Double(strLine));										// Print the content on the console					//System.out.println (strLine);					if(iterator==13)					{						prosodicFeatures.add(new Vector<Double>());						lineno++;						iterator=0;					}					else						iterator++;				}								//Close the input stream				in.close();			}catch (Exception e){//Catch exception if any				System.err.println("Error: " + e.getMessage());			}					//	}			// sanity checks...		}			}		// since we don't have Pair in java, just use two vectors of start and corresponding	// stop times...	public Vector<Vector<Double>> 	extractFeatures(String wavfile, Vector<Double> startoffsets, Vector<Double> endoffsets) {		Integer numintervals = startoffsets.size();		assert(numintervals==endoffsets.size());		Vector<Vector<Double>> prosodicFeatures = new Vector<Vector<Double>>();		try 		{				String str = "intervals.txt";			File file= new File(str);			BufferedWriter output = new BufferedWriter(new FileWriter(file));					for(int i=0; i<startoffsets.size(); i++)		{			double start = startoffsets.get(i).doubleValue()/1000;			output.write((new Double(start)).toString());			output.newLine();			double end = endoffsets.get(i).doubleValue()/1000;			output.write((new Double(end)).toString());			output.newLine();			prosodicFeatures.add(new Vector<Double>());		   ((Vector<Double>)prosodicFeatures.get(i)).add(new Double(endoffsets.get(i)-startoffsets.get(i)));			if(i>0)				((Vector<Double>)prosodicFeatures.get(i)).add(new Double(startoffsets.get(i)-endoffsets.get(i-1)));			else				((Vector<Double>)prosodicFeatures.get(i)).add(new Double(0));				}		    output.close();	    }		catch (IOException e) {			e.printStackTrace();		}				//String[] cmd = {"/Applications/Praat.app/Contents/MacOS/Praat", " pitchscript.praat", wavfile}; 			    String debugCurrentDir = System.getProperty("user.dir");	    String osname = System.getProperty("os.name");		String praatpath = "/Applications/Praat.app/Contents/MacOS/Praat src/pitchscript.praat ";		if(osname.compareToIgnoreCase("Mac OS X")!=0) {			praatpath = "C:/Users/teja/Documents/Stan/cs224s/praatcon.exe src/pitchscript.praat ";		}				File f = new File("features.txt");		if (f.exists()){			f.delete();		}				String cmd =  praatpath+ wavfile;		try		{			Process p =Runtime.getRuntime().exec(cmd);			try			{				int exitCode = p.waitFor();				}			catch(Exception e){e.printStackTrace();}		}				catch(IOException e)		{			e.printStackTrace();		}		// interact with Praat script and fill in prosodic features. Write and delete intermediate		// files if needed..		// TODO		//		//for(int i=0; i<startoffsets.size(); i++)		//{						try{				// Open the file that is the first 				// command line parameter				FileInputStream fstream = new FileInputStream("features.txt");				// Get the object of DataInputStream				DataInputStream in = new DataInputStream(fstream);				BufferedReader br = new BufferedReader(new InputStreamReader(in));				String strLine;				int lineno=0;				int iterator=0;				//Read File Line By Line				while ((strLine = br.readLine()) != null)   {					if(strLine.equals("--undefined--"))					{					      strLine="0";					}					((Vector<Double>)prosodicFeatures.get(lineno)).add(new Double(strLine));						// Print the content on the console					//System.out.println (strLine);					if(iterator==5)					{						lineno++;						iterator=0;					}					else						iterator++;				}				//Close the input stream				in.close();			}catch (Exception e){//Catch exception if any				System.err.println("Error: " + e.getMessage());			}			//	}		// sanity checks...		assert(prosodicFeatures.size()==numintervals); // as many prosodic features as intervals.		for(int interval=0; interval<numintervals; interval++) {			assert(prosodicFeatures.get(interval).size()==m_featureNames.size());		}		return prosodicFeatures;	}		public File[] getWaveFiles(String dataDir) {				String speechdir = new String(dataDir);		speechdir = speechdir.concat("/speech/dev1_wav");	    File[] speechfiles = getFilesWithExtension(speechdir,"wav");				return speechfiles;	}		public File[] getIntervalFiles(String dataDir) {		String textdir = new String(dataDir);		textdir = textdir.concat("/text/dev1_int");	    File[] intervalfiles = getFilesWithExtension(textdir,"txt");				return intervalfiles;	}		public File[] getWaveFiles2(String dataDir) {				String speechdir = new String(dataDir);		speechdir = speechdir.concat("/speech/dev2_wav");	    File[] speechfiles = getFilesWithExtension(speechdir,"wav");				return speechfiles;	}		public File[] getIntervalFiles2(String dataDir) {		String textdir = new String(dataDir);		textdir = textdir.concat("/text/dev2_int");	    File[] intervalfiles = getFilesWithExtension(textdir,"txt");				return intervalfiles;	}			public File[] getFilesWithExtension(String dir, String ext) {		File txtdir = new File(dir);		MyFilter filter = this.new MyFilter(ext);	    File[] files = txtdir.listFiles(filter);			    return files;	}		public class MyFilter implements FilenameFilter {		String m_ext;		public MyFilter(String ext) { m_ext = ext; }        public boolean accept(File dir, String name) {        	if(name.startsWith("."))        		return false;        	if(!name.endsWith(".".concat(m_ext)))        		return false;        	return true;        }    };}